# -*- coding: utf-8 -*-
"""Prueba del primer proyecto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b5L7yoZ339tBHbZnoFL-eW_nQMMApgLl
"""

!pip install gdown

import gdown

# Descargar ZIPs correctamente
gdown.download(id='1lQL22NS13Bn-3mXAr-U1h_VGTp7V9gR-', output='modelo_2_ensamble.zip', quiet=False)
gdown.download(id='1O7IQhH-nnozax5iQDVpih-SkRDLAUh0O', output='modelo_afinado_tuning.zip', quiet=False)

"""Se descomprime"""

import zipfile

with zipfile.ZipFile('modelo_2_ensamble.zip', 'r') as zip_ref:
    zip_ref.extractall()

with zipfile.ZipFile('modelo_afinado_tuning.zip', 'r') as zip_ref:
    zip_ref.extractall()

from tensorflow.keras.models import load_model

modelo1 = load_model('modelo_2_ensamble.keras')
modelo2 = load_model('modelo_afinado_tuning.keras')

from google.colab import drive
drive.mount('/content/drive')

# === Cargar los modelos entrenados ===
from tensorflow.keras.models import load_model
import numpy as np
from tensorflow.keras.preprocessing.image import img_to_array
from PIL import Image
import matplotlib.pyplot as plt
import io

# Cargar modelos guardados
modelo1 = load_model("modelo_afinado_tuning.keras")
modelo2 = load_model("modelo_2_ensamble.keras")

# === Funci贸n de ensamble con probabilidad ===
def predict_ensemble(model1, model2, image_array, threshold=0.5):
    pred1 = model1.predict(image_array)[0][0]
    pred2 = model2.predict(image_array)[0][0]
    avg_pred = (pred1 + pred2) / 2
    class_label = 'PNEUMONIA' if avg_pred > threshold else 'NORMAL'
    return class_label, avg_pred

# === Probar con una imagen ===
# Ruta de una imagen de prueba
image_path = "/content/Normal 2.jpeg"  # Cambia por la ruta de tu imagen

# Cargar y preprocesar imagen
image = Image.open(image_path).convert("L")
image = image.resize((256, 256))
img_array = img_to_array(image) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Predicci贸n con ensamble
class_label, prob = predict_ensemble(modelo1, modelo2, img_array)

# Mostrar resultado
print(f"Diagn贸stico: {class_label} ({prob * 100:.2f}% de certeza)")
plt.imshow(image, cmap='gray')
plt.title(f"Predicci贸n: {class_label} ({prob * 100:.2f}%)")
plt.axis('off')
plt.show()